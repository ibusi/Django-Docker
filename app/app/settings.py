"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

#OSに依存しているさまざまな機能を利用するためのモジュール。
#主にファイルやディレクトリ操作が可能で、ファイルの一覧やpathを取得できたり、新規にファイル・ディレクトリを作成することができる。
import os

#プロジェクトのベースフォルダを示す。
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

#SECRET_KEYは、django内部で生成・利用される暗号鍵や署名をさらに安全にするために利用される。
#具体例として、webアプリでユーザーが登録するパスワードの暗号化や、パスワード変更用のURL生成等に使用される。
#os.environには環境変数が保存されており、ここに保存されている環境変数を変更したり新しく加えたりすることで
#現在のプロセスの環境変数を変更することができる。保存できるのは文字列のみになっている。
#os.environ['']かos.environ.get('')でアクセス
#os.environ.get('')を使う場合は第2引数にデフォルト値を指定することができる。
# SECURITY WARNING: keep the secret key used in production secret!
#SECRET_KEYはdocker-compose.ymlで宣言する
SECRET_KEY = os.environ.get('SECRET_KEY', 'changeme')

#デバッグモードの有効(True)、無効(False)を指定する。
#デバッグモードではエラー発生時にブラウザにエラーの詳細情報を表示する。
#また、実行したSQLクエリをすべてメモリ上に記憶したり、キャッシュを無効にしたりなど、速度やリソースを犠牲にして
#デバッグ向けにカスタマイズされた状態で動作する。
#API, KEY, PASS, SECRET, SIGNATURE, TOKEN などの秘密にすべきキーワードを含む値は表示されないが、
#攻撃に有益な情報を与えてしまうため、本番環境では DEBUG に True を指定してはならない。

#os.environはstringなのでint()でintegerに変換
#bool()boolに変換。1がtrue 0がfalse(DEBUGはdocker-compose.ymlで1を代入済み)
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(int(os.environ.get('DEBUG', 0)))

#ALLOWED_HOSTSはサーバが受理するサーバアドレスを指定する。クライアントから送られてきた Host: ヘッダの値と比較され、
#一致しない場合は 400 エラーを返す。'*' を指定することもできるが、
#この値を正確に記述することは「Hostヘッダインジェクション攻撃」に対して有効。
#DEBUGをFalseにした場合は、ALLOWED_HOSTSを指定し、許可するドメイン（IPアドレス）を指定する必要がある。
#つまり、ALLOWED_HOSTS = []のままではエラーになる。

#ALLOWED_HOSTS_ENVにALLOWED_HOSTSを代入。
#if ALLOWED_HOSTS_ENV:はALLOWED_HOSTS_ENVを既に定義しているのでtrueになる
#.extendはリストに別のリストの要素を追加する
#リスト：任意の型（整数、浮動小数点数、文字列など）のデータを格納できる。
#要素には順序があり、インデックスを用いて要素を指定できる。リストの要素は変更可能。
#他のプログラミング言語における「配列」的な使い方をする
#文字列名.split(“ 区切り文字 ”) （今回は , で区切る）とすることで、区切り文字で区切られたリストを得る事が出来きる。
#docker-compose.ymlでALLOWED_HOSTSを宣言
ALLOWED_HOSTS = []
ALLOWED_HOSTS_ENV = os.environ.get('ALLOWED_HOSTS')
if ALLOWED_HOSTS_ENV:
    ALLOWED_HOSTS.extend(ALLOWED_HOSTS_ENV.split(','))


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'hello_world',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

#STATIC_URLはweb serverに静的ファイルを見に行く場所を指定する。ブラウザからアクセスする先。
STATIC_URL = '/static/static/'
MEDIA_URL = '/static/media/'


STATIC_ROOT = '/vol/web/static'
MEDIA_ROOT = '/vol/web/media'

